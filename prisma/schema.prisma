generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id                          Int                           @id @default(autoincrement())
  name                        String
  colonyNickName              String
  colonyAddress               Bytes
  tokenAddress                Bytes
  tokenAuthorityAddress       Bytes
  AddExistingTokenTransaction AddExistingTokenTransaction[]
  ChildToken                  ChildToken[]
  CreateNewTokenTransaction   CreateNewTokenTransaction[]
  tokens                      OrganizationsTokens[]
  users                       OrganizationsUsers[]

  @@index([colonyNickName])
}

model User {
  email         String               @id
  organizations OrganizationsUsers[]
}

model OrganizationsUsers {
  organizationId Int
  userEmail      String
  assignedAt     DateTime     @default(now())
  user           User         @relation(fields: [userEmail], references: [email])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, userEmail])
  @@index([organizationId])
  @@index([userEmail])
}

model Token {
  id            Int                   @id @default(autoincrement())
  childs        ChildToken[]          @relation("child")
  parents       ChildToken[]          @relation("parent")
  organizations OrganizationsTokens[]
}

model OrganizationsTokens {
  organizationId Int
  tokenId        Int
  assignedAt     DateTime     @default(now())
  comment        String
  token          Token        @relation(fields: [tokenId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, tokenId])
  @@index([organizationId])
  @@index([tokenId])
}

model ChildToken {
  parentId       Int
  childId        Int
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  child          Token        @relation("child", fields: [childId], references: [id])
  parent         Token        @relation("parent", fields: [parentId], references: [id])

  @@id([organizationId, parentId, childId])
  @@index([parentId])
  @@index([childId])
}

model Transaction {
  id                               Int                               @id @default(autoincrement())
  tx                               Bytes                             @unique
  createdAt                        DateTime                          @default(now())
  blockChecked                     Int?
  lastCheckedAt                    DateTime?
  kind                             Int
  confirmed                        Boolean                           @default(false)
  AddExistingTokenTransaction      AddExistingTokenTransaction?
  CreateNewOrganizationTransaction CreateNewOrganizationTransaction?
  createNewToken                   CreateNewTokenTransaction?

  @@index([confirmed])
  @@index([lastCheckedAt])
}

model CreateNewTokenTransaction {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  transaction    Transaction  @relation(fields: [id], references: [id])
}

model AddExistingTokenTransaction {
  id             Int          @id @default(autoincrement())
  organizationId Int
  tokenId        BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])
  transaction    Transaction  @relation(fields: [id], references: [id])
}

model CreateNewOrganizationTransaction {
  id               Int         @id @default(autoincrement())
  tokenName        String
  tokenSymbol      String
  colonyNickName   String
  organizationName String
  transaction      Transaction @relation(fields: [id], references: [id])
}
